{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"local scriptVersion = \"1.1\"\n-------------------------\n-- USER DEFINED DATA ----\n-------------------------\nlocal fuel_screen_number = 1 --export: Found screen number, 1 or 2\nlocal damage_screen_number = 2 --export: Found screen number, 1 or 2\nif fuel_screen_number > damage_screen_number then\n\tfuel_screen_number = 2\n\tdamage_screen_number = 1\nelse\n\tfuel_screen_number = 1\n\tdamage_screen_number = 2\nend\nlocal damaged_elements_to_check = 100 --export: The number of elements checked in one cycle\nlocal atmo_color = \"blue\" --export: color for atmo tanks\nlocal space_color = \"yellow\" --export: color for space tanks\nlocal rocket_color = \"pink\" --export: color for rocket tanks\nlocal tankColors = {\n\tatmo = atmo_color,\n\tspace = space_color,\n\trocket = rocket_color\n}\nlocal font_size = 5 --export: font size for the table\nlocal font_color = \"black\" --export: font color for the table\nlocal screen_color = \"#979A9A\" --export: screen background color\nlocal no_damage_color = \"green\" --export: \"No Damage\" text color\nlocal progress_color = \"#FF8B00\" --export: \"Progress...\" text color\nlocal damage_text_color = \"#FFC2C2\" --export: damage text color for the system screen\nlocal fuel_tank_text_color = \"#C2F7FF\" --export: fuel tank text color for the system screen\nlocal screen_text_shadow_color = \"black\" --export: text shadow color for the system screen\nlocal table_border_color = \"black\" --export: table border color\nlocal header_background_color = \"#959595\" --export: table header background color\nlocal header_text_color = \"white\" --export: table header text color\nlocal row_color_1 = \"#ECF0F1\" --export: table even line background color\nlocal row_color_2 = \"#D0D3D4\" --export: table odd line background color\nlocal update_time = 1 --export: time in seconds to update data\nlocal indicator_color = \"#229954\" --export: indicator color\nlocal pointer_max_distance = 6 --export: distance in meters from element to start pointing\nlocal pointer_fps = 30 --export: pointer movement fps (not more than 30)\nlocal pointer_speed = 2 --export: pointer speed m/s\nif pointer_fps > 30 then pointer_fps = 30 end\nlocal pointerUpdateTime = 1 / pointer_fps\nlocal pointerStep = pointer_speed / pointer_fps\nlocal pointerSteps = math.floor(pointer_max_distance / pointerStep)\n\n-------------------------\n-- VARIABLES ------------\n-------------------------\nlocal indicatorColorCurrent = indicator_color\n\nlocal tanks = {\n\tatmo = {},\n\tspace = {},\n\trocket = {}\n}\nlocal tanksIdToShow = {}\n\nlocal damaged = {}\nlocal damagedIdToShow = {}\nlocal tempDamaged = {}\nlocal tempDamagedIdToShow = {}\n\nlocal core = nil\nlocal uidList = {}\nlocal numberIdToCheck = 0\nlocal currentIdToCheck = 0\nlocal screens = {}\n\nlocal elementsToScroll = {}\nlocal activeScrollList = 0\n\nlocal activeElementId = 0\nlocal pointCounter = 0\nlocal pointTimerIsActive = false\nlocal activatePointTimer = false\n\nlocal htmlIndicator = \"\"\n\n-------------------------\n-- HTML -----------------\n-------------------------\nlocal htmlStyle = [[<style>\n\tdiv.screen {\n\t\tbackground-color:]]..screen_color..[[;\n\t\twidth:100vw;\n\t\theight:100vh;\n\t}\n\t\n\ttable {\n\t\tfont-family:\"Lucinda Sans\";\n\t\tposition:absolute;\n\t\tfont-size:]]..font_size..[[vh;\n\t\tbackground-color:]]..screen_color..[[;\n\t\tborder-collapse:collapse;\n\t\tmargin:0px auto;\n\t\tcolor:]]..font_color..[[;\n\t\twidth:90vw;\n\t\tleft:10vh;\n\t\ttop:5vh;\n\t}\n\t\n\tth {\n\t\tbackground-color:]]..header_background_color..[[;\n\t\tcolor:]]..header_text_color..[[;\n\t}\n\t\n\ttd.cell {\n\t\tfont-family:\"Lucinda Sans\";\n\t\tcolor:]]..font_color..[[;\n\t}\n\t\n\tth, td {\n\t\tborder: solid 0.4vw ]]..table_border_color..[[;\n\t\tpadding: 0.5vw;\n\t\theight:8vh;\n\t}\n\t\n\ttbody {\n\t\tbackground-color:]]..row_color_1..[[;\n\t}\n\t\n\ttbody.zebra tr:nth-child(even) {\n\t\tbackground-color:]]..row_color_2..[[;\n\t}\n\t\n\tdiv.indicator {\n\t\tposition:absolute;\n\t\ttop:0;\n\t\tleft:0;\n\t\twidth:2vw;\n\t\theight:5vh;\n\t}\n\t\n\tdiv.message {\n\t\tposition:absolute;\n\t\tfont-family:\"Lucinda Sans\";\n\t\ttop:40vh;\n\t\theight:20vh;\n\t\twidth:90vw;\n\t\tfont-size:10vh;\n\t\ttext-align:center;\n\t}\n</style>\n<div class=\"screen\"></div>\n]]\n\nlocal htmlNoDamage = [[<div class=\"message\" style=\"color:]]..no_damage_color..[[;\">No Damage Found</div>]]\nlocal htmlProcessing = [[<div class=\"message\" style=\"color:]]..progress_color..[[;\">Processing...</div>]]\n\nlocal helpInfo = [[<table>\n\t<tr>\n\t\t<th colspan=\"2\">Script v.]]..scriptVersion..[[ stopped</th>\n\t</tr>\n\t<tr>\n\t\t<td class='cell'>Alt+1</td>\n\t\t<td class='cell'>Selector:<br>0 - nothing<br>1 - indicate damaged elements<br>2 - indicate fuel tanks</td>\n\t</tr>\n\t<tr>\n\t\t<td class='cell'>Alt+2</td>\n\t\t<td class='cell'>Select the next element to indicate</td>\n\t</tr>\n\t<tr>\n\t\t<td class='cell'>Alt+3</td>\n\t\t<td class='cell'>Select the previous element to indicate</td>\n\t</tr>\n\t<tr>\n\t\t<td class='cell'>Alt+9</td>\n\t\t<td class='cell'>Stop script</td>\n\t</tr>\n</table>]]\n\nlocal noDamageFoundText = \"NO DAMAGE FOUND\"\nlocal damageIndicatorActivatedText = \"DAMAGE INDICATOR ACTIVATED\"\nlocal noFuelTanksFoundText = \"NO FUEL TANKS FOUND\"\nlocal fuelTankIndicatorActivatedText =\"FUEL TANK INDICATOR ACTIVATED\"\n\nlocal damageTableTemplate = \"<table><tr><th style='width:10vw'>id</th><th style='width:20vw'>type</th><th style='width:30vw'>name</th><th style='width:10vw'>hp</th><th style='width:10vw'>max hp</th><th>%%</th></tr><tbody class='zebra'>%s</tbody></table>\"\nlocal damageRowTemplate = \"<tr><td class='cell'>%d</td><td class='cell'>%s</td><td class='cell'>%s</td><td class='cell'>%d</td><td class='cell'>%d</td><td class='cell'>%.1f</td></tr>\"\n\nlocal fuelTanksTableTemplate = \"<table><tr><th style='width:10vw'>code</th><th style='width:10vw'>id</th><th style='width:60vw'>name</th><th>%%</th></tr><tbody>%s</tbody></table>\"\nlocal fuelTanksRowTemplate = \"<tr><td class='cell' style='background-color:%s'></td><td class='cell'>%d</td><td class='cell'>%s</td><td class='cell'>%d</td></tr>\"\n\nlocal systemScreenHtmlTemplate = [[<div style=\"position:absolute;top:10vh;right:5vw;height:5vh;width:90vw;color:%s;text-shadow:0.2vw 0.2vh 1vw %s;font-size:2vh;text-align:center;\">%s</div>]]\n\n-------------------------\n-- FUNCTIONS ------------\n-------------------------\nlocal function initiateSlots()\n\tfor _, slot in pairs(unit) do\n\t\tif type(slot) == \"table\" and type(slot.export) == \"table\" and slot.getClass then\n\t\t\tlocal elementClass = slot.getClass():lower()\n\t\t\tif elementClass:find(\"coreunit\") then\n\t\t\t\tcore = slot\n\t\t\t\t--[[local coreHP = core.getMaxHitPoints()\n\t\t\t\tif coreHP > 10000 then\n\t\t\t\t\tcoreOffset = 128\n\t\t\t\telseif coreHP > 1000 then\n\t\t\t\t\tcoreOffset = 64\n\t\t\t\telseif coreHP > 150 then\n\t\t\t\t\tcoreOffset = 32\n\t\t\t\telse\n\t\t\t\t\tcoreOffset = 16\n\t\t\t\tend--]]\n\t\t\t\tuidList = core.getElementIdList()\n\t\t\t\tnumberIdToCheck = #uidList\n\t\t\telseif elementClass == \"screenunit\" then\n\t\t\t\ttable.insert(screens,slot)\n\t\t\telseif elementClass == \"atmofuelcontainer\" then\n\t\t\t\ttable.insert(tanks.atmo,slot)\n\t\t\t\ttable.insert(tanksIdToShow,slot.getLocalId())\n\t\t\telseif elementClass == \"spacefuelcontainer\" then\n\t\t\t\ttable.insert(tanks.space,slot)\n\t\t\t\ttable.insert(tanksIdToShow,slot.getLocalId())\n\t\t\telseif elementClass == \"rocketfuelcontainer\" then\n\t\t\t\ttable.insert(tanks.rocket,slot)\n\t\t\t\ttable.insert(tanksIdToShow,slot.getLocalId())\n\t\t\tend\n\t\tend\n\tend\n\t\n\tif #screens > 1 then\n\t\tlocal screenId1 = screens[1].getLocalId()\n\t\tlocal screenId2 = screens[2].getLocalId()\n\t\tif screenId1 > screenId2 then\n\t\t\tlocal temp = fuel_screen_number\n\t\t\tfuel_screen_number = damage_screen_number\n\t\t\tdamage_screen_number = temp\n\t\tend\n\tend\n\t\nend\n\nlocal function setDamagedElements()\n\tif core then\n\t\tlocal maxId = currentIdToCheck + damaged_elements_to_check\n\t\tif maxId > numberIdToCheck then\n\t\t\tmaxId = numberIdToCheck\n\t\tend\n\t\t\n\t\tfor i = currentIdToCheck, maxId , 1 do\n\t\t\tlocal uid = uidList[i]\n\t\t\tlocal maxHitpoints = math.floor(core.getElementMaxHitPointsById(uid)) or 0\n\t\t\tlocal hitPoints = math.floor(core.getElementHitPointsById(uid)) or 0\n\t\t\t\n\t\t\tif hitPoints < maxHitpoints then\n\t\t\t\tlocal element = {}\n\t\t\t\telement.uid = uid\n\t\t\t\telement.type = core.getElementDisplayNameById(uid) or \"unknown\"\n\t\t\t\telement.name = core.getElementDisplayNameById(uid) or \"unknown\"\n\t\t\t\telement.hitPoints = hitPoints\n\t\t\t\telement.maxHitPoints = maxHitpoints\n\t\t\t\telement.position = core.getElementPositionById(uid) or 0\n\t\t\t\ttable.insert(tempDamaged,element)\n\t\t\t\ttable.insert(tempDamagedIdToShow,uid)\n\t\t\tend\n\t\tend\n\t\t\n\t\tif maxId == numberIdToCheck then\n\t\t\tdamaged = tempDamaged\n\t\t\tdamagedIdToShow = tempDamagedIdToShow\n\t\t\ttempDamaged = {}\n\t\t\ttempDamagedIdToShow = {}\n\t\t\tcurrentIdToCheck = 0\n\t\telseif #damaged < #tempDamaged then\n\t\t\tdamaged = tempDamaged\n\t\t\tdamagedIdToShow = tempDamagedIdToShow\n\t\t\tcurrentIdToCheck = maxId + 1\n\t\telse\n\t\t\tcurrentIdToCheck = maxId + 1\n\t\tend\n\tend\nend\n\nlocal function getDefaultTextAndColor()\n\tlocal text = \"\"\n\tlocal textColor = \"#000000\"\n\t\n\tif activeScrollList == 1 then\n\t\tif #damagedIdToShow < 1 then\n\t\t\ttext = noDamageFoundText\n\t\telse\n\t\t\ttext = damageIndicatorActivatedText\n\t\tend\n\t\ttextColor = damage_text_color\n\telseif activeScrollList == 2 then\n\t\tif #tanksIdToShow < 1 then\n\t\t\ttext = noFuelTanksFoundText\n\t\telse\n\t\t\ttext = fuelTankIndicatorActivatedText\n\t\tend\n\t\ttextColor = fuel_tank_text_color\n\tend\n\t\n\treturn text, textColor\nend\n\nlocal function setScreenTextHtml(text,textColor)\n\tsystem.setScreen(string.format(systemScreenHtmlTemplate,textColor,screen_text_shadow_color,text))\nend\n\nlocal function messageToShow(elementId)\n\tif elementId > 0 and #elementsToScroll > 0 then\n\t\tlocal uid = elementsToScroll[elementId]\n\t\t\n\t\tif not uid then\n\t\t\tactiveElementId = 1\n\t\t\tuid = elementsToScroll[activeElementId]\n\t\tend\n\t\t\n\t\tlocal _, textColor = getDefaultTextAndColor()\t\n\t\tlocal text = [[SELECTED: №]]\n\t\t\t..uid..[[ | ]]\n\t\t\t..core.getElementDisplayNameById(uid)..[[ | ]]\n\t\t\t..core.getElementDisplayNameById(uid)\n\t\tsetScreenTextHtml(text,textColor)\n\telse\n\t\tlocal text, textColor = getDefaultTextAndColor()\n\t\tsetScreenTextHtml(text,textColor)\n\tend\nend\n\nlocal function setProcessing()\n\tfor _, screen in ipairs(screens) do\n\t\tscreen.setHTML(htmlStyle..htmlProcessing)\n\tend\nend\n\nfunction changeElementsToScroll()\n\tactiveElementId = 0\n\t\n\tif activeScrollList == 0 then\n\t\telementsToScroll = damagedIdToShow\n\t\tactiveScrollList = 1\n\telseif activeScrollList == 1 then\n\t\telementsToScroll = tanksIdToShow\n\t\tactiveScrollList = 2\n\telse\n\t\telementsToScroll = {}\n\t\tactiveScrollList = 0\n\tend\n\t\n\tlocal text, textColor = getDefaultTextAndColor()\n\tsetScreenTextHtml(text,textColor)\nend\n\nfunction activeElementIdUp()\n\tif #elementsToScroll > 0 then\n\t\tactivatePointTimer = true\n\t\tactiveElementId = activeElementId + 1\n\t\tif activeElementId > #elementsToScroll then\n\t\t\tactiveElementId = 0\n\t\t\tactivatePointTimer = false\n\t\tend\n\t\tmessageToShow(activeElementId)\n\t\tpointCounter = 0\n\telse\n\t\tmessageToShow(0)\n\tend\nend\n\nfunction activeElementIdDown()\n\tif #elementsToScroll > 0 then\n\t\tactivatePointTimer = true\n\t\tactiveElementId = activeElementId - 1\n\t\tif activeElementId == 0 then\n\t\t\tactivatePointTimer = false\n\t\telseif activeElementId < 0 then\n\t\t\tactiveElementId = #elementsToScroll\n\t\tend\n\t\tmessageToShow(activeElementId)\n\t\tpointCounter = 0\n\telse\n\t\tmessageToShow(0)\n\tend\nend\n\nlocal function displayFuelTanks()\n\tif screens[fuel_screen_number] then\n\t\tlocal messageRows = {}\n\t\tfor tankType, subTanks in pairs(tanks) do\n\t\t\tfor key, tank in ipairs(subTanks) do\n\t\t\t\t local data = json.decode(tank.getWidgetData()) \n\t\t\t\t --table.insert(messageRows,string.format(fuelTanksRowTemplate,tankColors[tankType],tank.getLocalId(),data.name,data.percentage))\n\t\t\t\t table.insert(messageRows,\"<tr><td class='cell' style='background-color:\"..tankColors[tankType]..\"'></td><td class='cell'>\"..tank.getLocalId()..\"</td><td class='cell'>\"..data.name..\"</td><td class='cell'>\"..data.percentage..\"%</td></tr>\")\n\t\t\tend\n\t\tend\n\t\tlocal html = string.format(fuelTanksTableTemplate,table.concat(messageRows))\n\t\t--local html = \"<table><tr><th style='width:10vw'>code</th><th style='width:10vw'>id</th><th style='width:60vw'>name</th><th>%</th></tr><tbody>\"\n\t\t--\t..table.concat(messageRows)\n\t\t--\t.. \"</tbody></table>\"\n\t\tscreens[fuel_screen_number].setHTML(htmlStyle..html..htmlIndicator)\n\tend\nend\n\nlocal function displayDamagedElements()\n\tif screens[damage_screen_number] then\n\t\tif #damaged < 1 then\n\t\t\tscreens[damage_screen_number].setHTML(htmlStyle..htmlNoDamage..htmlIndicator)\n\t\telse\n\t\t\tlocal messageRows = {}\n\t\t\tfor _, element in ipairs(damaged) do\n\t\t\t\ttable.insert(messageRows, string.format(damageRowTemplate, element.uid, element.type, element.name,element.hitPoints,element.maxHitPoints,math.floor(1000*element.hitPoints/element.maxHitPoints)/10))\n\t\t\tend\n\t\t\t\n\t\t\tlocal rows = 10\n\t\t\tif rows > #damaged then rows = #damaged end\n\t\t\tlocal html = string.format(damageTableTemplate,table.concat(messageRows,\"\",1,rows))\n\t\t\t--local html = \"<table><tr><th style='width:10vw'>id</th><th style='width:20vw'>type</th><th style='width:30vw'>name</th><th style='width:10vw'>hp</th><th style='width:10vw'>max hp</th><th>%</th></tr><tbody class='zebra'>\"\n\t\t\t--\t..table.concat(messageRows,\"\",1,rows)\n\t\t\t--\t.. \"</tbody></table>\"\n\t\t\tscreens[damage_screen_number].setHTML(htmlStyle..html..htmlIndicator)\n\t\tend\n\tend\nend\n\n-------------------------\n-- UPDATE FUNCTION ------\n-------------------------\nfunction update()\n\tif indicatorColorCurrent == indicator_color then indicatorColorCurrent = screen_color else indicatorColorCurrent = indicator_color end\n\thtmlIndicator = [[<div class=\"indicator\" style=\"background-color:]]..indicatorColorCurrent..[[;\"></div>]]\n\t\n\tdisplayFuelTanks()\n\t\n\tsetDamagedElements()\n\tdisplayDamagedElements()\n\t\n\tif not pointTimerIsActive and activatePointTimer then\n\t\tunit.setTimer(\"point\", pointerUpdateTime)\n\t\tpointTimerIsActive = true\n\tend\nend\n\n-------------------------\n-- POINTER FUNCTION -----\n-------------------------\nfunction pointElement()\n\tif #elementsToScroll > 0 and activeElementId > 0 then\n\t\tlocal uid = elementsToScroll[activeElementId]\n\t\t\n\t\tif not uid then\n\t\t\tactiveElementId = 1\n\t\t\tuid = elementsToScroll[activeElementId]\n\t\t\tmessageToShow(activeElementId)\n\t\tend\n\t\t\n\t\tlocal position = core.getElementPositionById(elementsToScroll[activeElementId])\n\t\tlocal x = position[1]\n\t\tlocal y = position[2]\n\t\tlocal z = position[3]\n\t\tlocal arrowShift = pointerStep * (pointerSteps - pointCounter)\n\t\t\n\t\tif not arrowId then\n\t\t\tarrowId = {\n\t\t\t\tup = core.spawnArrowSticker(0,0,0,\"up\"),\n\t\t\t\tdown = core.spawnArrowSticker(0,0,0,\"down\"),\n\t\t\t\tnorth = core.spawnArrowSticker(0,0,0,\"north\"),\n\t\t\t\tsouth = core.spawnArrowSticker(0,0,0,\"south\"),\n\t\t\t\teast = core.spawnArrowSticker(0,0,0,\"east\"),\n\t\t\t\twest = core.spawnArrowSticker(0,0,0,\"west\")\n\t\t\t}\t\t\t\t\n\t\tend\n\t\t\n\t\tcore.moveSticker(arrowId.up,x,y,z - arrowShift)\n\t\tcore.moveSticker(arrowId.down,x,y,z + arrowShift)\n\t\tcore.moveSticker(arrowId.north,x + arrowShift,y,z)\n\t\tcore.moveSticker(arrowId.south,x - arrowShift,y,z)\n\t\tcore.moveSticker(arrowId.east,x,y - arrowShift,z)\n\t\tcore.moveSticker(arrowId.west,x,y + arrowShift,z)\n\t\t\n\t\tpointCounter = pointCounter + 1\n\t\tif pointCounter > pointerSteps then pointCounter = 0 end\n\telse\n\t\tif arrowId then\n\t\t\tfor _, id in pairs(arrowId) do\n\t\t\t\tcore.deleteSticker(id)\n\t\t\tend\n\t\t\tarrowId = nil\n\t\tend\n\t\tpointCounter = 0\n\t\tunit.stopTimer(\"point\")\n\t\tactivatePointTimer = false\n\t\tpointTimerIsActive = false\n\t\tmessageToShow(0)\n\tend\nend\n\n------------------------------\n-- STOP FUNCTION -------------\n------------------------------\nfunction stop()\n\tfor _, screen in ipairs(screens) do\n\t\tscreen.setHTML(htmlStyle..helpInfo)\n\tend\n\tsystem.setScreen(\"\")\n\tsystem.showScreen(0)\nend\n\n------------------------------------\n-- START CODE ----------------------\n------------------------------------\ninitiateSlots()\nsetProcessing()\nsystem.showScreen(1)\n\n------------------------------\n-- UPDATE REFRESH TIMER ------\n------------------------------\nunit.setTimer(\"update\", update_time)","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"-------------------------\n-- STOP -----------------\n-------------------------\nstop()","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"1"},{"code":"-------------------------\n-- FILTER UPDATE --------\n-------------------------\nupdate()","filter":{"args":[{"value":"update"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"2"},{"code":"-------------------------\n-- FILTER POINT ---------\n-------------------------\npointElement()\n","filter":{"args":[{"value":"point"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"3"},{"code":"-------------------------\n-- Alt+1 ----------------\n-------------------------\nchangeElementsToScroll()\n","filter":{"args":[{"value":"option1"}],"signature":"actionStart(action)","slotKey":"-4"},"key":"4"},{"code":"-------------------------\n-- Alt+2 ----------------\n-------------------------\nactiveElementIdUp()","filter":{"args":[{"value":"option2"}],"signature":"actionStart(action)","slotKey":"-4"},"key":"5"},{"code":"-------------------------\n-- Alt+3 ----------------\n-------------------------\nactiveElementIdDown()","filter":{"args":[{"value":"option3"}],"signature":"actionStart(action)","slotKey":"-4"},"key":"6"},{"code":"-------------------------\n-- Alt+9 ----------------\n-------------------------\nunit.exit()","filter":{"args":[{"value":"option9"}],"signature":"actionStart(action)","slotKey":"-4"},"key":"7"}],"methods":[],"events":[]}
