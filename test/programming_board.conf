{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"local scriptVersion = \"2.0\"\n-------------------------\n-- USER DEFINED DATA ----\n-------------------------\nlocal damaged_elements_to_check = 100 --export: The number of elements checked in one cycle\n\nlocal damage_text_color = \"#FFC2C2\" --export: damage text color for the system screen\nlocal fuel_tank_text_color = \"#C2F7FF\" --export: fuel tank text color for the system screen\nlocal screen_text_shadow_color = \"black\" --export: text shadow color for the system screen\n\nlocal update_time = 1 --export: time in seconds to update data\n\nlocal pointer_max_distance = 6 --export: distance in meters from element to start pointing\nlocal pointer_fps = 30 --export: pointer movement fps (not more than 30)\nlocal pointer_speed = 2 --export: pointer speed m/s\nif pointer_fps > 30 then pointer_fps = 30 end\nlocal pointerUpdateTime = 1 / pointer_fps\nlocal pointerStep = pointer_speed / pointer_fps\nlocal pointerSteps = math.floor(pointer_max_distance / pointerStep)\nlocal stringMax = 1024 --export: max string size to transmit\nlocal startPattern = \"[s]\"\nlocal stopPattern = \"[e]\"\n\n-------------------------\n-- VARIABLES ------------\n-------------------------\nlocal tanks = {\n\tatmo = {},\n\tspace = {},\n\trocket = {}\n}\nlocal tanksIdToShow = {}\n\nlocal damaged = {}\nlocal damagedIdToShow = {}\nlocal tempDamaged = {}\nlocal tempDamagedIdToShow = {}\n\nlocal core = nil\nlocal uidList = {}\nlocal numberIdToCheck = 0\nlocal currentIdToCheck = 0\nlocal damageScreens = {}\nlocal fuelScreens = {}\n\nlocal elementsToScroll = {}\nlocal activeScrollList = 0\n\nlocal activeElementId = 0\nlocal pointCounter = 0\nlocal pointTimerIsActive = false\nlocal activatePointTimer = false\nlocal isDamageListComplete = false\nlocal isTransmissionFuelInProgress = false\nlocal isTransmissionDamageInProgress = false\n\nlocal noDamageFoundText = \"NO DAMAGE FOUND\"\nlocal damageIndicatorActivatedText = \"DAMAGE INDICATOR ACTIVATED\"\nlocal noFuelTanksFoundText = \"NO FUEL TANKS FOUND\"\nlocal fuelTankIndicatorActivatedText =\"FUEL TANK INDICATOR ACTIVATED\"\n\n-------------------------\n-- HTML -----------------\n-------------------------\nlocal systemScreenHtmlTemplate = [[<div style=\"position:absolute;top:10vh;right:5vw;height:5vh;width:90vw;color:%s;text-shadow:0.2vw 0.2vh 1vw %s;font-size:2vh;text-align:center;\">%s</div>]]\n\n-------------------------\n-- FUNCTIONS ------------\n-------------------------\nlocal function initiateSlots()\n\tfor _, slot in pairs(unit) do\n\t\tif type(slot) == \"table\" and type(slot.export) == \"table\" and slot.getClass then\n\t\t\tlocal elementClass = slot.getClass():lower()\n\t\t\tif elementClass:find(\"coreunit\") then\n\t\t\t\tcore = slot\n\t\t\t\tuidList = core.getElementIdList()\n\t\t\t\tnumberIdToCheck = #uidList\n\t\t\telseif elementClass == \"screenunit\" then\n\t\t\t\tif slot.getScriptOutput() == \"damage\" then\n\t\t\t\t\ttable.insert(damageScreens,slot)\n\t\t\t\telseif slot.getScriptOutput() == \"fuel\" then\n\t\t\t\t\ttable.insert(fuelScreens,slot)\n\t\t\t\tend\n\t\t\telseif elementClass == \"atmofuelcontainer\" then\n\t\t\t\ttable.insert(tanks.atmo,slot)\n\t\t\t\ttable.insert(tanksIdToShow,slot.getLocalId())\n\t\t\telseif elementClass == \"spacefuelcontainer\" then\n\t\t\t\ttable.insert(tanks.space,slot)\n\t\t\t\ttable.insert(tanksIdToShow,slot.getLocalId())\n\t\t\telseif elementClass == \"rocketfuelcontainer\" then\n\t\t\t\ttable.insert(tanks.rocket,slot)\n\t\t\t\ttable.insert(tanksIdToShow,slot.getLocalId())\n\t\t\tend\n\t\tend\n\tend\n\t\n\tif not core then\n\t\terror(\"No core connected!\")\n\tend\n\t\n\t--table.sort(screens, function (a, b) return (a.getLocalId() < b.getLocalId()) end)\nend\n\nlocal function setDamagedElements()\n\tif core then\n\t\tlocal maxId = currentIdToCheck + damaged_elements_to_check\n\t\tif maxId > numberIdToCheck then\n\t\t\tmaxId = numberIdToCheck\n\t\tend\n\t\t\n\t\tfor i = currentIdToCheck, maxId , 1 do\n\t\t\tlocal uid = uidList[i]\n\t\t\tlocal maxHitpoints = math.floor(core.getElementMaxHitPointsById(uid)) or 0\n\t\t\tlocal hitPoints = math.floor(core.getElementHitPointsById(uid)) or 0\n\t\t\t\n\t\t\tif hitPoints < maxHitpoints then\n\t\t\t\tlocal element = {}\n\t\t\t\telement.uid = uid\n\t\t\t\telement.class = core.getElementClassById(uid) or \"unknown\"\n\t\t\t\telement.name = core.getElementDisplayNameById(uid) or \"unknown\"\n\t\t\t\telement.hitPoints = hitPoints\n\t\t\t\telement.maxHitPoints = maxHitpoints\n\t\t\t\telement.position = core.getElementPositionById(uid) or 0\n\t\t\t\ttable.insert(tempDamaged,element)\n\t\t\t\ttable.insert(tempDamagedIdToShow,uid)\n\t\t\tend\n\t\tend\n\t\t\n\t\tif maxId == numberIdToCheck then\n\t\t\tdamaged = tempDamaged\n\t\t\tdamagedIdToShow = tempDamagedIdToShow\n\t\t\ttempDamaged = {}\n\t\t\ttempDamagedIdToShow = {}\n\t\t\tcurrentIdToCheck = 0\n\t\t\tisDamageListComplete = true\n\t\t--elseif #damaged < #tempDamaged then\n\t\t\t--damaged = tempDamaged\n\t\t\t--damagedIdToShow = tempDamagedIdToShow\n\t\t\t--currentIdToCheck = maxId + 1\n\t\telse\n\t\t\tcurrentIdToCheck = maxId + 1\n\t\tend\n\tend\nend\n\nlocal function getDefaultTextAndColor()\n\tlocal text = \"\"\n\tlocal textColor = \"#000000\"\n\t\n\tif activeScrollList == 1 then\n\t\tif #damagedIdToShow < 1 then\n\t\t\ttext = noDamageFoundText\n\t\telse\n\t\t\ttext = damageIndicatorActivatedText\n\t\tend\n\t\ttextColor = damage_text_color\n\telseif activeScrollList == 2 then\n\t\tif #tanksIdToShow < 1 then\n\t\t\ttext = noFuelTanksFoundText\n\t\telse\n\t\t\ttext = fuelTankIndicatorActivatedText\n\t\tend\n\t\ttextColor = fuel_tank_text_color\n\tend\n\t\n\treturn text, textColor\nend\n\nlocal function setScreenTextHtml(text,textColor)\n\tsystem.setScreen(string.format(systemScreenHtmlTemplate,textColor,screen_text_shadow_color,text))\nend\n\nlocal function messageToShow(elementId)\n\tif elementId > 0 and #elementsToScroll > 0 then\n\t\tlocal uid = elementsToScroll[elementId]\n\t\t\n\t\tif not uid then\n\t\t\tactiveElementId = 1\n\t\t\tuid = elementsToScroll[activeElementId]\n\t\tend\n\t\t\n\t\tlocal _, textColor = getDefaultTextAndColor()\t\n\t\tlocal text = [[SELECTED: â„–]]\n\t\t\t..uid..[[ | ]]\n\t\t\t..core.getElementClassById(uid)..[[ | ]]\n\t\t\t..core.getElementDisplayNameById(uid)\n\t\tsetScreenTextHtml(text,textColor)\n\telse\n\t\tlocal text, textColor = getDefaultTextAndColor()\n\t\tsetScreenTextHtml(text,textColor)\n\tend\nend\n\nlocal function sendToScreens(screens,stringData)\n\tfor _, screen in ipairs(screens) do\n\t\tscreen.setScriptInput(stringData)\n\tend\nend\n\nlocal function setProcessing()\n\tlocal stringToSend = \"processing\"\n\tsendToScreens(damageScreens,stringToSend)\n\tsendToScreens(fuelScreens,stringToSend)\nend\n\nfunction changeElementsToScroll()\n\tactiveElementId = 0\n\t\n\tif activeScrollList == 0 then\n\t\telementsToScroll = damagedIdToShow\n\t\tactiveScrollList = 1\n\telseif activeScrollList == 1 then\n\t\telementsToScroll = tanksIdToShow\n\t\tactiveScrollList = 2\n\telse\n\t\telementsToScroll = {}\n\t\tactiveScrollList = 0\n\tend\n\t\n\tlocal text, textColor = getDefaultTextAndColor()\n\tsetScreenTextHtml(text,textColor)\nend\n\nfunction activeElementIdUp()\n\tif #elementsToScroll > 0 then\n\t\tactivatePointTimer = true\n\t\tactiveElementId = activeElementId + 1\n\t\tif activeElementId > #elementsToScroll then\n\t\t\tactiveElementId = 0\n\t\t\tactivatePointTimer = false\n\t\tend\n\t\tmessageToShow(activeElementId)\n\t\tpointCounter = 0\n\telse\n\t\tmessageToShow(0)\n\tend\nend\n\nfunction activeElementIdDown()\n\tif #elementsToScroll > 0 then\n\t\tactivatePointTimer = true\n\t\tactiveElementId = activeElementId - 1\n\t\tif activeElementId == 0 then\n\t\t\tactivatePointTimer = false\n\t\telseif activeElementId < 0 then\n\t\t\tactiveElementId = #elementsToScroll\n\t\tend\n\t\tmessageToShow(activeElementId)\n\t\tpointCounter = 0\n\telse\n\t\tmessageToShow(0)\n\tend\nend\n\nlocal function getFuelTanksString()\n\tif #fuelScreens > 0 then\n\t\tlocal dataStringRows = {}\n\t\tfor tankType, subTanks in pairs(tanks) do\n\t\t\tfor key, tank in ipairs(subTanks) do\n\t\t\t\tlocal data = json.decode(tank.getWidgetData())\n\t\t\t\tlocal objectToRecord = {}\n\t\t\t\tobjectToRecord[1] = tank.getLocalId()\n\t\t\t\tobjectToRecord[2] = tankType\n\t\t\t\tobjectToRecord[3] = data.name\n\t\t\t\tobjectToRecord[4] = data.percentage\n\t\t\t\ttable.insert(dataStringRows,table.concat(objectToRecord,\",\"))\n\t\t\tend\n\t\tend\n\t\t\n\t\treturn table.concat(dataStringRows,\";\")\n\tend\nend\n\nlocal function getDamagedElementsString()\n\tif #damageScreens > 0 then\n\t\tlocal dataStringRows = {}\n\t\tfor _, element in ipairs(damaged) do\n\t\t\tlocal objectToRecord = {}\n\t\t\tobjectToRecord[1] = element.uid\n\t\t\tobjectToRecord[2] = element.class\n\t\t\tobjectToRecord[3] = element.name\n\t\t\tobjectToRecord[4] = element.hitPoints\n\t\t\tobjectToRecord[5] = element.maxHitPoints\n\t\t\ttable.insert(dataStringRows,table.concat(objectToRecord,\",\"))\n\t\tend\n\t\t\n\t\treturn table.concat(dataStringRows,\";\")\n\tend\nend\n\n\n-------------------------\n-- UPDATE FUNCTION ------\n-------------------------\nfunction fuelTransmission(dataString)\n\tif not isTransmissionFuelInProgress then\n\t\tif dataString and dataString ~= \"\" then\n\t\t\tstringFuelToTransmit = startPattern .. dataString .. stopPattern\n\t\t\t--system.print(\"stringFuelToTransmit = \"..stringFuelToTransmit)\n\t\t\tisTransmissionFuelInProgress = true\n\t\t\tunit.setTimer(\"transmit_fuel\", 0.05)\n\t\tend\n\t\treturn\n\tend\n\t\n\tif #stringFuelToTransmit > stringMax then\n\t\tlocal stringPart = string.sub(stringFuelToTransmit,1,stringMax)\n\t\tsendToScreens(fuelScreens,stringPart)\n\t\tstringFuelToTransmit = string.sub(stringFuelToTransmit,stringMax+1)\n\telse\n\t\tsendToScreens(fuelScreens,stringFuelToTransmit)\n\t\tisTransmissionFuelInProgress = false\n\t\tunit.stopTimer(\"transmit_fuel\")\n\t\t--system.print(\"fuel transmission complete\")\n\tend\nend\n\nfunction damageTransmission(dataString)\n\tif not isTransmissionDamageInProgress then\n\t\tif dataString and dataString ~= \"\" then\n\t\t\tstringDamageToTransmit = startPattern .. dataString .. stopPattern\n\t\t\t--system.print(\"stringDamageToTransmit = \"..stringDamageToTransmit)\n\t\t\tisTransmissionDamageInProgress = true\n\t\t\tunit.setTimer(\"transmit_damage\", 0.05)\n\t\tend\n\t\treturn\n\tend\n\t\n\tif #stringDamageToTransmit > stringMax then\n\t\tlocal stringPart = string.sub(stringDamageToTransmit,1,stringMax)\n\t\tsendToScreens(damageScreens,stringPart)\n\t\tstringDamageToTransmit = string.sub(stringDamageToTransmit,stringMax+1)\n\telse\n\t\tsendToScreens(damageScreens,stringDamageToTransmit)\n\t\tisTransmissionDamageInProgress = false\n\t\tunit.stopTimer(\"transmit_damage\")\n\t\t--system.print(\"damage transmission complete\")\n\tend\nend\n\nfunction update()\n\t-- pointing the element\n\tif not pointTimerIsActive and activatePointTimer then\n\t\tunit.setTimer(\"point\", pointerUpdateTime)\n\t\tpointTimerIsActive = true\n\tend\n\t\n\t-- fuel tanks section\n\tif not isTransmissionFuelInProgress then\n\t\t-- start transmission\n\t\tfuelTransmission(getFuelTanksString())\n\tend\n\t\n\t-- damage elements section\t\n\tif not isTransmissionDamageInProgress then\n\t\tif not isDamageListComplete then\n\t\t\tsetDamagedElements()\n\t\telse\n\t\t\t-- start transmission\n\t\t\tdamageTransmission(getDamagedElementsString())\n\t\tend\n\tend\nend\n\n-------------------------\n-- POINTER FUNCTION -----\n-------------------------\nfunction pointElement()\n\tif #elementsToScroll > 0 and activeElementId > 0 then\n\t\tlocal uid = elementsToScroll[activeElementId]\n\t\t\n\t\tif not uid then\n\t\t\tactiveElementId = 1\n\t\t\tuid = elementsToScroll[activeElementId]\n\t\t\tmessageToShow(activeElementId)\n\t\tend\n\t\t\n\t\tlocal position = core.getElementPositionById(elementsToScroll[activeElementId])\n\t\tlocal x = position[1]\n\t\tlocal y = position[2]\n\t\tlocal z = position[3]\n\t\tlocal arrowShift = pointerStep * (pointerSteps - pointCounter)\n\t\t\n\t\tif not arrowId then\n\t\t\tarrowId = {\n\t\t\t\tup = core.spawnArrowSticker(0,0,0,\"up\"),\n\t\t\t\tdown = core.spawnArrowSticker(0,0,0,\"down\"),\n\t\t\t\tnorth = core.spawnArrowSticker(0,0,0,\"north\"),\n\t\t\t\tsouth = core.spawnArrowSticker(0,0,0,\"south\"),\n\t\t\t\teast = core.spawnArrowSticker(0,0,0,\"east\"),\n\t\t\t\twest = core.spawnArrowSticker(0,0,0,\"west\")\n\t\t\t}\t\t\t\t\n\t\tend\n\t\t\n\t\tcore.moveSticker(arrowId.up,x,y,z - arrowShift)\n\t\tcore.moveSticker(arrowId.down,x,y,z + arrowShift)\n\t\tcore.moveSticker(arrowId.north,x + arrowShift,y,z)\n\t\tcore.moveSticker(arrowId.south,x - arrowShift,y,z)\n\t\tcore.moveSticker(arrowId.east,x,y - arrowShift,z)\n\t\tcore.moveSticker(arrowId.west,x,y + arrowShift,z)\n\t\t\n\t\tpointCounter = pointCounter + 1\n\t\tif pointCounter > pointerSteps then pointCounter = 0 end\n\telse\n\t\tif arrowId then\n\t\t\tfor _, id in pairs(arrowId) do\n\t\t\t\tcore.deleteSticker(id)\n\t\t\tend\n\t\t\tarrowId = nil\n\t\tend\n\t\tpointCounter = 0\n\t\tunit.stopTimer(\"point\")\n\t\tactivatePointTimer = false\n\t\tpointTimerIsActive = false\n\t\tmessageToShow(0)\n\tend\nend\n\n------------------------------\n-- STOP FUNCTION -------------\n------------------------------\nfunction stop()\n\tlocal stringToSend = \"stopped\"\n\tsendToScreens(damageScreens,stringToSend)\n\tsendToScreens(fuelScreens,stringToSend)\n\t\n\tsystem.setScreen(\"\")\n\tsystem.showScreen(0)\nend\n\n------------------------------------\n-- START CODE ----------------------\n------------------------------------\ninitiateSlots()\nsetProcessing()\nsystem.showScreen(1)\n\n------------------------------\n-- UPDATE REFRESH TIMER ------\n------------------------------\nunit.setTimer(\"update\", update_time)","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"stop()","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"1"},{"code":"update()","filter":{"args":[{"value":"update"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"2"},{"code":"pointElement()\n","filter":{"args":[{"value":"point"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"3"},{"code":"fuelTransmission()","filter":{"args":[{"value":"transmit_fuel"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"4"},{"code":"damageTransmission()","filter":{"args":[{"value":"transmit_damage"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"5"},{"code":"-------------------------\n-- Alt+1 ----------------\n-------------------------\nchangeElementsToScroll()\n","filter":{"args":[{"value":"option1"}],"signature":"actionStart(action)","slotKey":"-4"},"key":"6"},{"code":"-------------------------\n-- Alt+2 ----------------\n-------------------------\nactiveElementIdUp()","filter":{"args":[{"value":"option2"}],"signature":"actionStart(action)","slotKey":"-4"},"key":"7"},{"code":"-------------------------\n-- Alt+3 ----------------\n-------------------------\nactiveElementIdDown()","filter":{"args":[{"value":"option3"}],"signature":"actionStart(action)","slotKey":"-4"},"key":"8"},{"code":"-------------------------\n-- Alt+9 ----------------\n-------------------------\nunit.exit()","filter":{"args":[{"value":"option9"}],"signature":"actionStart(action)","slotKey":"-4"},"key":"9"}],"methods":[],"events":[]}
